{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","CardArray","map","user","i","key","SearchBox","searchfeild","searchChange","type","placeholder","onChange","Scroll","props","style","border","height","overflowY","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","this","filterRobot","filter","robot","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAYeA,EAVF,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,GAAGC,EAAe,EAAfA,KAAKC,EAAU,EAAVA,MAEnB,OACI,yBAAKC,UAAU,0DACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BL,EAA1B,cACrB,4BAAKC,GACL,2BAAIC,KCeDI,EAnBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAETC,EAAYD,EAAOE,KAAI,SAACC,EAAOC,GACjC,OACI,kBAAC,EAAD,CACIC,IAAOD,EACPX,GAAKO,EAAOI,GAAGX,GACfC,KAAOM,EAAOI,GAAGV,KACjBC,MAASK,EAAOI,GAAGT,WAK/B,OACI,6BACKM,ICNEK,EAXG,SAAC,GAAiC,EAAhCC,YAAiC,IAAnBC,EAAkB,EAAlBA,aAC9B,OACI,2BACIZ,UAAU,mCACVa,KAAO,SACPC,YAAY,cACZC,SAAaH,KCEVI,EARA,SAACC,GACZ,OACI,yBAAKC,MAAS,CAACC,OAAQ,kBAAkBC,OAAO,QAASC,UAAW,WAC/DJ,EAAMK,WCuCJC,G,wDArCX,aAAe,IAAD,8BACV,gBAcJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACf,YAAac,EAAME,OAAOC,SAdzC,EAAKC,MAAQ,CACTzB,OAAS,GACTO,YAAc,IAJR,E,gEAQM,IAAD,OACfmB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAxB,GACF,EAAKmB,SAAS,CAACtB,OAAQG,S,+BAMrB,IAAD,EACwB2B,KAAKL,MAA3BzB,EADF,EACEA,OAAQO,EADV,EACUA,YACLwB,EAAc/B,EAAOgC,QAAO,SAAAC,GAClC,OAAOA,EAAMvC,KAAKwC,cAAcC,SAAS5B,EAAY2B,kBAEtD,OAAUlC,EAAOoC,OAGR,yBAAKxC,UAAU,MACP,4CACA,kBAAC,EAAD,CAAWY,aAAgBsB,KAAKV,iBAChC,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUpB,OAAU+B,MANzC,wBAAInC,UAAW,MAAf,kB,GAzBOyC,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ca439fea.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({id,name,email}) =>{\r\n    \r\n    return(\r\n        <div className='tc grow bg-light-green ma2 shadow-5 dib br2 pa2 bw2 w5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`}/>\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n        </div>\r\n    )\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n\r\n    const CardArray = robots.map((user , i) =>{\r\n        return (\r\n            <Card\r\n                key = {i} \r\n                id= {robots[i].id}\r\n                name= {robots[i].name}\r\n                email = {robots[i].email} \r\n            />\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            {CardArray}\r\n        </div>\r\n    )\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfeild , searchChange}) => {\r\n    return(\r\n        <input \r\n            className='bg-lightest-blue pa3 ba bg-green'\r\n            type = 'search'\r\n            placeholder='searchRobot' \r\n            onChange = { searchChange }\r\n            />\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n    return(\r\n        <div style = {{border: '1px solid black',height:'500px', overflowY: 'scroll'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots : [],\r\n            searchfeild : ''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response =>response.json())\r\n        .then(user =>{\r\n            this.setState({robots: user})\r\n        })\r\n    }\r\n    onSearchChange = (event) =>{\r\n        this.setState({searchfeild: event.target.value})\r\n    }\r\n    render() {\r\n        const {robots ,searchfeild} =this.state\r\n            const filterRobot = robots.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(searchfeild.toLowerCase())\r\n           })\r\n           return   !robots.length ?\r\n           <h1 className= 'tc'>Loading...</h1> :\r\n                (\r\n                    <div className='tc'>\r\n                            <h1>ROBO FRIENDS</h1>\r\n                            <SearchBox searchChange = {this.onSearchChange} />\r\n                            <Scroll>\r\n                                <CardList robots = {filterRobot}/>\r\n                            </Scroll>\r\n                    </div>\r\n                );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}